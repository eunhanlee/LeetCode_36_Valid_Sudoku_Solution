import static org.junit.jupiter.api.Assertions.assertEquals;

import org.example.Solution;
import org.example.Solution2;
import org.junit.jupiter.api.Test;

public class SolutionTest {
    @Test
    public void testSolution() {
        Solution2 solution = new Solution2();

        char[][] board1 = {
                {'5' , '3' , '.' , '.' , '7' , '.' , '.' , '.' , '.'},
                {'6' , '.' , '.' , '1' , '9' , '5' , '.' , '.' , '.'},
                {'.' , '9' , '8' , '.' , '.' , '.' , '.' , '6' , '.'},
                {'8' , '.' , '.' , '.' , '6' , '.' , '.' , '.' , '3'},
                {'4' , '.' , '.' , '8' , '.' , '3' , '.' , '.' , '1'},
                {'7' , '.' , '.' , '.' , '2' , '.' , '.' , '.' , '6'},
                {'.' , '6' , '.' , '.' , '.' , '.' , '2' , '8' , '.'},
                {'.' , '.' , '.' , '4' , '1' , '9' , '.' , '.' , '5'},
                {'.' , '.' , '.' , '.' , '8' , '.' , '.' , '7' , '9'}
        };
        assertEquals(true, solution.isValidSudoku(board1));

        char[][] board2 = {
                {'8' , '3' , '.' , '.' , '7' , '.' , '.' , '.' , '.'},
                {'6' , '.' , '.' , '1' , '9' , '5' , '.' , '.' , '.'},
                {'.' , '9' , '8' , '.' , '.' , '.' , '.' , '6' , '.'},
                {'8' , '.' , '.' , '.' , '6' , '.' , '.' , '.' , '3'},
                {'4' , '.' , '.' , '8' , '.' , '3' , '.' , '.' , '1'},
                {'7' , '.' , '.' , '.' , '2' , '.' , '.' , '.' , '6'},
                {'.' , '6' , '.' , '.' , '.' , '.' , '2' , '8' , '.'},
                {'.' , '.' , '.' , '4' , '1' , '9' , '.' , '.' , '5'},
                {'.' , '.' , '.' , '.' , '8' , '.' , '.' , '7' , '9'}
        };
        assertEquals(false, solution.isValidSudoku(board2));

        char[][] board3 = {
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'}
        };
        assertEquals(true, solution.isValidSudoku(board3));

        char[][] board4 = {
                {'8' , '3' , '.' , '.' , '7' , '.' , '.' , '.' , '.'},
                {'6' , '.' , '.' , '1' , '9' , '5' , '.' , '.' , '.'},
                {'.' , '9' , '8' , '.' , '.' , '.' , '.' , '6' , '.'},
                {'8' , '.' , '.' , '.' , '6' , '.' , '.' , '.' , '3'},
                {'4' , '.' , '.' , '8' , '.' , '3' , '.' , '.' , '1'},
                {'7' , '.' , '.' , '.' , '2' , '.' , '.' , '.' , '6'},
                {'.' , '6' , '.' , '.' , '.' , '.' , '2' , '8' , '.'},
                {'.' , '.' , '.' , '4' , '1' , '9' , '.' , '.' , '5'},
                {'.' , '.' , '.' , '.' , '8' , '.' , '.' , '7' , '9'}
        };
        assertEquals(false, solution.isValidSudoku(board4));

        char[][] board5 = {
                {'5' , '3' , '.' , '.' , '7' , '.' , '.' , '.' , '.'},
                {'6' , '.' , '.' , '1' , '9' , '5' , '.' , '.' , '.'},
                {'.' , '9' , '8' , '.' , '.' , '.' , '.' , '6' , '.'},
                {'8' , '.' , '.' , '.' , '6' , '.' , '.' , '.' , '3'},
                {'4' , '.' , '.' , '8' , '.' , '3' , '.' , '.' , '1'},
                {'7' , '.' , '.' , '.' , '2' , '.' , '.' , '.' , '6'},
                {'.' , '6' , '.' , '.' , '.' , '.' , '2' , '8' , '.'},
                {'.' , '.' , '.' , '4' , '1' , '9' , '.' , '.' , '5'},
                {'.' , '.' , '.' , '.' , '8' , '.' , '.' , '7' , '9'}
        };
        assertEquals(true, solution.isValidSudoku(board5));

        char[][] board6 = {
                {'5' , '3' , '.' , '.' , '7' , '.' , '.' , '.' , '9'},
                {'6' , '.' , '.' , '1' , '9' , '5' , '.' , '.' , '.'},
                {'.' , '9' , '8' , '.' , '.' , '.' , '.' , '6' , '.'},
                {'8' , '.' , '.' , '.' , '6' , '.' , '.' , '.' , '3'},
                {'4' , '.' , '.' , '8' , '.' , '3' , '.' , '.' , '1'},
                {'7' , '.' , '.' , '.' , '2' , '.' , '.' , '.' , '6'},
                {'.' , '6' , '.' , '.' , '.' , '.' , '2' , '8' , '.'},
                {'.' , '.' , '.' , '4' , '1' , '9' , '.' , '.' , '5'},
                {'1' , '.' , '.' , '.' , '8' , '.' , '.' , '7' , '9'}
        };
        assertEquals(false, solution.isValidSudoku(board6));

        char[][] board7 = {
                {'5' , '3' , '.' , '.' , '7' , '.' , '.' , '.' , '9'},
                {'6' , '.' , '.' , '1' , '9' , '5' , '.' , '.' , '.'},
                {'.' , '9' , '8' , '.' , '.' , '.' , '.' , '6' , '.'},
                {'8' , '.' , '.' , '.' , '6' , '.' , '.' , '.' , '3'},
                {'4' , '.' , '.' , '8' , '.' , '3' , '.' , '.' , '1'},
                {'7' , '.' , '.' , '.' , '2' , '.' , '.' , '.' , '6'},
                {'.' , '6' , '.' , '.' , '.' , '.' , '2' , '8' , '.'},
                {'.' , '.' , '.' , '4' , '1' , '9' , '.' , '.' , '5'},
                {'.' , '.' , '.' , '.' , '8' , '.' , '.' , '7' , '.'}
        };
        assertEquals(true, solution.isValidSudoku(board7));

        char[][] board8 = {
                {'1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9'},
                {'4' , '5' , '6' , '7' , '8' , '9' , '1' , '2' , '3'},
                {'7' , '8' , '9' , '1' , '2' , '3' , '4' , '5' , '6'},
                {'2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '1'},
                {'5' , '6' , '7' , '8' , '9' , '1' , '2' , '3' , '4'},
                {'8' , '9' , '1' , '2' , '3' , '4' , '5' , '6' , '7'},
                {'3' , '4' , '5' , '6' , '7' , '8' , '9' , '1' , '2'},
                {'6' , '7' , '8' , '9' , '1' , '2' , '3' , '4' , '5'},
                {'9' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8'}
        };
        assertEquals(true, solution.isValidSudoku(board8));

        char[][] board9 = {
                {'5' , '3' , '.' , '.' , '7' , '.' , '.' , '.' , '.'},
                {'6' , '.' , '.' , '1' , '9' , '5' , '.' , '.' , '.'},
                {'.' , '9' , '8' , '.' , '.' , '.' , '.' , '6' , '.'},
                {'8' , '.' , '.' , '.' , '6' , '.' , '.' , '.' , '3'},
                {'4' , '.' , '.' , '8' , '.' , '3' , '.' , '.' , '1'},
                {'7' , '.' , '.' , '.' , '2' , '.' , '.' , '.' , '6'},
                {'.' , '6' , '.' , '.' , '.' , '.' , '2' , '8' , '.'},
                {'.' , '.' , '.' , '4' , '1' , '9' , '.' , '.' , '5'},
                {'.' , '.' , '.' , '.' , '8' , '.' , '.' , '7' , '8'}
        };
        assertEquals(false, solution.isValidSudoku(board9));

        char[][] board10 = {
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'},
                {'.' , '.' , '.' , '.' , '.' , '.' , '.' , '.' , '.'}
        };
        assertEquals(true, solution.isValidSudoku(board10));

    }
}
